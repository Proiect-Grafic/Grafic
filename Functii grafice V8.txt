#include <fstream>
#include <cmath>
#include <cstring>
#include <graphics.h>
#include <winbgim.h>

void NumarInSir(tipDate numar,char sir[30]);

void TransformareLiniara(tipDate a,tipDate b,tipDate capat1,tipDate capat2,tipDate &m,tipDate &n);
void AflareMaxSiMin(stiva expresie,tipDate a,tipDate b,tipDate k,tipDate &yMin,tipDate &yMax);
void ReprezentareGrafic(stiva expresie,tipDate a,tipDate b);
void DesenareCareu(int stanga,int dreapta,int sus,int jos);
void DesenareAxeDeCoordonate(stiva functie,int stanga,int dreapta,int sus,int jos,tipDate a,tipDate b,int distantaSageata);

void NumarInSir(tipDate numar,char sir[30])
{
    int copie,numarCifre=0,i;
    if(numar<0)
    {
        numar*=-1;
        ++numarCifre;
        sir[0]='-';
    }
    copie=int(numar);
    do
    {
        ++numarCifre;
        copie/=10;
    }
    while(copie);
    sir[numarCifre]=0;
    i=numarCifre;
    copie=int(numar);
    do
    {
        sir[--numarCifre]=copie%10+48;
        copie/=10;
    }
    while(copie);
    copie=int((numar-int(numar))*1000);
    if(copie)
    {
        sir[i]='.';
        sir[i+4]=0;
        i+=4;
        while(copie)
        {
            sir[--i]=copie%10+48;
            copie/=10;
        }
    }
}
void TransformareLiniara(tipDate a,tipDate b,tipDate capat1,tipDate capat2,tipDate &m,tipDate &n)
{
    if(a!=b)
        m=(capat1-capat2)/(a-b);
    else
        m=1;
    n=capat1-m*a;
}
void AflareMaxSiMin(stiva functie,tipDate a,tipDate b,tipDate &yMin,tipDate &yMax)
{
    tipDate val,k=0.125;
    /// k=0.125
    ///Aleg valoarea 0.125 deoarece aceasta poate fi reprezentata exact de catre calculator.
    ///Prima data am ales valoarea 0.1 ,dar aceasta este 0.1[10]=0.0(0011)[2] care nu poate fi
    ///reprezentata corect pe PC, indiferent de cat de multa memorie ai ,si ,din cauza asta,
    ///cand aflam minimul si maximul pentru (x-2)^2 pe [-10,10] ,imi dadea valori incorecte,
    ///in loc de 0 imi dadea 1.23e-23 si la maxim putea sa dea ceva diferit de 12^2
    yMin=yMax=EvaluareExpresie(functie,a);
    a+=k;
    while(a<=b)
    {
        val=EvaluareExpresie(functie,a);
        if(yMin>val)
            yMin=val;
        if(yMax<val)
            yMax=val;
        a+=k;
    }
}
void DesenareCareu(int stanga,int dreapta,int sus,int jos)
{
    line(stanga,sus,dreapta,sus);
    line(stanga,jos,dreapta,jos);
    line(stanga,sus,stanga,jos);
    line(dreapta,sus,dreapta,jos);
}
void DesenareAxeDeCoordonate(stiva functie,int stanga,int dreapta,int sus,int jos,tipDate a,tipDate b,int distantaSageata)
{
    tipDate m1,m2,n1,n2,x1,x2,y1,y2,valSegment,valPunct1,valPunct2;
    int restLungime,lungimeSageata=10,lungimeSegmentEcran,nrSegmente,raza=2,i,stangaCopie,dreaptaCopie,josCopie,susCopie;
    char Sir[30];
    stangaCopie=stanga;
    dreaptaCopie=dreapta;
    josCopie=jos;
    susCopie=sus;
    stanga+=distantaSageata;
    dreapta-=distantaSageata;
    jos-=distantaSageata;
    sus+=distantaSageata;
    nrSegmente=10;
    lungimeSegmentEcran=(dreapta-stanga)/nrSegmente;
    valSegment=1.0*(b-a)/nrSegmente;
    TransformareLiniara(a,b,stanga,dreapta,m1,n1);
    TransformareLiniara(a,b,jos,sus,m2,n2);
    ///std::cout<<valSegment<<' ';
    ///DesenareCareu(stangaCopie,dreaptaCopie,susCopie,josCopie);
    /// axa Oy
    ///Grid
    setcolor(7);
    x1=stangaCopie;
    x2=dreaptaCopie;
    y1=y2=n2;

    while(1)
    {
        y1-=lungimeSegmentEcran;
        if(y1<sus)
            break;
        line(x1,y1,x2,y1);
    }
    while(1)
    {
        y2+=lungimeSegmentEcran;
        if(y2>jos)
            break;
        line(x1,y2,x2,y2);
    }
    x1=x2=n1;
    y1=susCopie;
    y2=josCopie;
    while(1)
    {
        x1-=lungimeSegmentEcran;
        if(x1<stanga)
            break;
        line(x1,y1,x1,y2);
    }
    while(1)
    {
        x2+=lungimeSegmentEcran;
        if(x2>dreapta)
            break;
        line(x2,y1,x2,y2);
    }

    ///axa Oy
    if(a<=0&&0<=b)
    {
        x1=x2=n1;
        y1=susCopie;
        y2=josCopie;
        setcolor(BLACK);
        line(x1,y1,x2,y2);
        setcolor(BLACK);
        /// Sageata
        y1=susCopie;
        x1=n1;
        for(i=1; i<=lungimeSageata; ++i)
        {
            line(x1-i,y1+lungimeSageata,x1,y1);
            line(x1+i,y1+lungimeSageata,x1,y1);
        }
        ///Segmente
        x1=x2=n1;
        y1=y2=n2;
        valPunct1=valPunct2=0;
        while(1)
        {
            y1-=lungimeSegmentEcran;
            valPunct1+=valSegment;
            circle(x1,y1,raza);
            NumarInSir(valPunct1,Sir);
            outtextxy(x1-textwidth(Sir)-raza-4,y1-textheight(Sir)/2,Sir);
            if(y1-lungimeSegmentEcran<sus)
                break;
            ///posibil bug la conditia asta in cazul in care lungimeEcran e numar real
        }
        while(1)
        {
            y2+=lungimeSegmentEcran;
            valPunct2-=valSegment;
            circle(x2,y2,raza);
            NumarInSir(valPunct2,Sir);
            outtextxy(x2-textwidth(Sir)-raza-4,y2-textheight(Sir)/2,Sir);
            if(y2+lungimeSegmentEcran>jos)
                break;
        }
    }
    /// axa Ox
    if(a<=0&&0<=b)
    {
        y1=y2=n2;
        x1=stangaCopie;
        x2=dreaptaCopie;
        line(x1,y1,x2,y2);
        /// Sageata
        for(i=1; i<=lungimeSageata; ++i)
        {
            line(x2-lungimeSageata,y2-i,x2,y2);
            line(x2-lungimeSageata,y2+i,x2,y2);
        }
        ///Segmente

        x1=x2=n1;
        y1=y2=n2;
        valPunct1=valPunct2=0;
        while(1)
        {
            x1-=lungimeSegmentEcran;
            valPunct1-=valSegment;
            circle(x1,y1,raza);
            NumarInSir(valPunct1,Sir);
            outtextxy(x1-textwidth(Sir)/2,y1+raza+4,Sir);
            if(x1-lungimeSegmentEcran<stanga)
                break;
        }
        while(1)
        {
            x2+=lungimeSegmentEcran;
            valPunct2+=valSegment;
            circle(x2,y2,raza);
            NumarInSir(valPunct2,Sir);
            outtextxy(x2-textwidth(Sir)/2,y2+raza+4,Sir);
            if(x2+lungimeSegmentEcran>dreapta)
                break;
        }
    }
    ///Originea
    circle(n1,n2,raza);
    //outtextxy(n1-textwidth("0")-4,n2+raza+4,"0");
}
void ReprezentareGrafic(stiva functie,tipDate a,tipDate b)
{
    /*
    Puteri ale lui 0.5
    0.5
    0.25
    0.125
    0.0625
    0.03125
    0.015625
    0.0078125
    0.00390625 ----
    0.001953125
    0.0009765625
    */
    tipDate xCapat,yCapat,yVal,xVal,xVal1,yVal1,yValCurenta,yValPrec,epsilon,m1,n1,m2,n2,stanga,dreapta,sus,jos,distantaCareu=0;
    tipDate x1,y1,m,n,alfa;
    int culoareGrafic,culoareBk,latime,inaltime,distantaSageata,nrSegmente=10;

    distantaSageata=30;
    latime=800;
    inaltime=600;
    culoareGrafic=3; //BLUE
    /*
    stanga=sus=distantaEcran;
    dreapta=latime-distantaEcran;
    jos=inaltime-distantaEcran;
    */
    stanga=0;
    dreapta=latime-240;
    sus=40;
    jos=inaltime;

    //DesenareCareu(stanga,dreapta,sus,jos);

    stanga+=distantaCareu;
    dreapta-=distantaCareu;
    sus+=distantaCareu;
    jos-=distantaCareu;
    if(esteBuna==true)
    {
        DesenareAxeDeCoordonate(functie,stanga,dreapta,sus,jos,a,b,distantaSageata);
        /// * -> functia desenare axe va face in zona pusa graficul functie pe intervalul [a,b]
        ///dar aceasta va face loc si pentru sagetile de la axele Ox si Oy
        stanga+=distantaSageata;
        dreapta-=distantaSageata;
        sus+=distantaSageata;
        jos-=distantaSageata;
        TransformareLiniara(a,b,stanga,dreapta,m1,n1);
        TransformareLiniara(a,b,jos,sus,m2,n2);

        setcolor(culoareGrafic); ///-------------------

        ///Idee de lucru
        ///Idee este de a parcurge functia respectiva si de a alege 2 puncte xVal si xVal+epsilon
        ///si vom considera dreapta formata de acestea cu ajutorul unei ecuatii de gradul intai
        ///de forma y1=m*x1+n ,y2=m*x2+n.In functie de panta acestea(panta se refera si la cresterea
        ///functiei pe Oy in raport cu cresterea pe Ox).Daca abs(m) <1,atunci aceasta este mai apropiata de o
        ///linie orizontala si putem merge de la xVal pana la xVal + epsilon.Daca abs(m) > 1,atunci se apropie
        ///de o axa verticala si ar fi mai bine sa mergem de la min(y1,y2) pana la max(y1,y2) si aflam x1,x2
        ///cu formula de mai sus.Din ce am testat ,e cea mai rapida idee pana acum si traseaza graficul unei functii
        ///destul de bine (yey).
        ///<9 a=100,b=100,x*sin(x)
        epsilon=0.05*(abs(a)+abs(b))/20;
        alfa=epsilon/5;
        xVal=a;
        yValPrec=EvaluareExpresie(functie,xVal);
        while(yValPrec==inf)
        {
            xVal+=alfa;
            yValPrec=EvaluareExpresie(functie,xVal);
        }
        while(xVal<=b)
        {
            yValCurenta=EvaluareExpresie(functie,xVal+epsilon);
            while(yValCurenta==inf&&xVal<=b)
            {
                xVal+=epsilon;
                yValCurenta=EvaluareExpresie(functie,xVal+epsilon);
            }
            if(yValCurenta==inf)
                break;

            m=abs((yValPrec-yValCurenta)/epsilon);
            if(m<=1)
            {
                xCapat=xVal+epsilon+alfa;
                xVal+=alfa;
                for(;xVal<=xCapat;xVal+=alfa)
                {
                    yVal=EvaluareExpresie(functie,xVal);
                    if(yVal!=inf)
                    {
                        x1=m1*xVal+n1;
                        y1=m2*yVal+n2;
                        if(yVal>=a&&yVal<=b)
                            circle(x1,y1,1);
                    }
                }
            }
            else
            {
                yVal=std::min(yValPrec,yValCurenta);
                yCapat=std::max(yValPrec,yValCurenta);
                n=yVal-m*xVal;
                if(!(yCapat<a||yVal>b)&&yCapat!=inf)
                {
                    for(;yVal<=yCapat;yVal+=alfa)
                    {
                        xVal1=(yVal-n)/m;
                        yVal1=EvaluareExpresie(functie,xVal1);
                        if(yVal1!=inf)
                        {
                            x1=m1*xVal1+n1;
                            y1=m2*yVal1+n2;
                            if(yVal1>=a&&yVal1<=b)
                                circle(x1,y1,1);
                        }
                    }
                    xVal+=epsilon;
                }
            }
            yValPrec=yValCurenta;
        }
    }
    else
    {
        settextstyle(0, 0 , 4);
        setcolor(RED);
        outtextxy(50, 250, "FUNCTIA NU ESTE VALIDA");
        setcolor(BLACK);
        settextstyle(0, 0 , 0);
        esteBuna=true;
    }
    /*
    Cazul I : Zoom In pentru 1/x de la -10,10
    Cazul II: 1/tan(x) pe -10,10
    */
}
